version: "3.2"
services:
  vpn:
    container_name: vpn
    image: dperson/openvpn-client:latest
    cap_add:
      - net_admin # required to modify network interfaces
    networks:
      - default
    restart: unless-stopped
    volumes:
      - /dev/net:/dev/net:z # tun device
      - ${DOCKERCONFDIR}/vpn:/vpn # OpenVPN configuration
    security_opt:
      - label:disable
    ports:
      - 8112:8112 # port for deluge web UI to be reachable from local network
    command: '-f "" -r 192.168.199.0/24' # enable firewall and route local network traffic

  deluge:
    container_name: deluge
    image: linuxserver/deluge:latest
    restart: unless-stopped
    network_mode: service:vpn # run on the vpn network
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - ${DOCKERSTORAGEDIR}/torrents:/data/torrents
      - ${DOCKERCONFDIR}/deluge:/config # config files

  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    restart: unless-stopped
    network_mode: host
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERSTORAGEDIR}/torrents/torrent-blackhole:/downloads # place where to put .torrent files for manual download
      - ${DOCKERCONFDIR}/jackett:/config # config files

# Nzbget - https://hub.docker.com/r/linuxserver/nzbget
# <mkdir /volume1/docker/appdata/nzbget>
  nzbget:
    container_name: nzbget
    image: linuxserver/nzbget:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID} # default user id, defined in .env
      - PGID=${PGID} # default group id, defined in .env
      - TZ=${TZ} # timezone, defined in .env
    ports:
      - 6789:6789
    volumes:
      - ${DOCKERSTORAGEDIR}/usenet:/data/usenet:rw
      - ${DOCKERCONFDIR}/nzbget:/config 

# Radarr - https://hotio.dev/containers/radarr/
# <mkdir /volume1/docker/appdata/radarr>
  radarr:
    container_name: radarr
    image: ghcr.io/hotio/radarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 7878:7878
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/radarr:/config
      - ${DOCKERSTORAGEDIR}:/data

# Sonarr - https://hotio.dev/containers/sonarr/
# <mkdir /volume1/docker/appdata/sonarr>
  sonarr:
    container_name: sonarr
    image: ghcr.io/hotio/sonarr:latest
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 8989:8989
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/sonarr:/config
      - ${DOCKERSTORAGEDIR}:/data

# Bazarr - https://hotio.dev/containers/bazarr/
# <mkdir /volume1/docker/appdata/bazarr>
  bazarr:
    container_name: bazarr
    image: ghcr.io/hotio/bazarr:nightly
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 6767:6767
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/bazarr:/config
      - ${DOCKERSTORAGEDIR}/media:/data/media

# Watchtower (automatic docker container updater) - https://github.com/containrrr/watchtower
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    logging:
      driver: json-file
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=022
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_MONITOR_ONLY=false
      - WATCHTOWER_SCHEDULE=0 0 4 * * *
      - WATCHTOWER_TIMEOUT=10s
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock

# Plex - https://hotio.dev/containers/plex/
# <mkdir /volume1/docker/appdata/plex>
  plex:
    container_name: plex
    image: ghcr.io/hotio/plex
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 32400:32400
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - ARGS=
      - DEBUG=no
      - PLEX_CLAIM=${PLEX_CLAIM}
      - ADVERTISE_IP=
      - ALLOWED_NETWORKS=
      - PLEX_PASS=${PLEX_PASS}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/plex:/config:rw
      - ${DOCKERSTORAGEDIR}/media:/data/media:rw
      - /tmp:/transcode:rw
      - /dev/dri:/dev/dri

# Tautulli - https://hotio.dev/containers/tautulli/
# <mkdir /volume1/docker/appdata/tautulli>
  tautulli:
    container_name: tautulli
    image: ghcr.io/hotio/tautulli
    restart: unless-stopped
    logging:
      driver: json-file
    ports:
      - 8181:8181
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK=002
      - ARGS=
      - DEBUG=no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DOCKERCONFDIR}/tautulli:/config:rw

networks:
  defaults:
